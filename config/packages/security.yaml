security:
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        signup:
            pattern: ^/api/user/
            stateless: true
            anonymous: true
            methods: [POST]

        api:
            pattern: ^/api
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        admin:
            pattern: ^/admin
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        main:
            anonymous: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        - { path: ^/api/user/, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [POST] }
        - { path: ^/api/user/, roles: ROLE_ADMIN, methods: [GET, PUT, DELETE] }

        - { path: ^/api/exercise/, roles: ROLE_USER, methods: [GET] }
        - { path: ^/api/exercise/, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }

        - { path: ^/api/program/, roles: ROLE_USER, methods: [GET] }
        - { path: ^/api/program/, roles: ROLE_ADMIN, methods: [POST, PUT, DELETE] }

        - { path: ^/api/mastery-level/, roles: ROLE_ADMIN, methods: [GET, POST, PUT, DELETE] }
        
        # Géré dans le HintController en Annotation
        #- { path: ^/api/hint/, roles: ROLE_ADMIN, methods: [GET, POST, PUT, DELETE] }

        - { path: ^/api/prerequisite/, roles: ROLE_ADMIN, methods: [GET, POST, PUT, DELETE] }

        - { path: ^/api/exercise-comment/, roles: ROLE_USER, methods: [GET, POST] }
        - { path: ^/api/exercise-comment/, roles: ROLE_MODERATOR, methods: [PUT, DELETE] }

        - { path: ^/api/program-comment/, roles: ROLE_USER, methods: [GET, POST] }
        - { path: ^/api/pogram-comment/, roles: ROLE_MODERATOR, methods: [PUT, DELETE] }

        - { path: ^/api/user/, roles: ROLE_ADMIN, methods: [GET] }
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }
        - { path: '^/admin', roles: ROLE_ADMIN }

    role_hierarchy:
        ROLE_ADMIN: ROLE_MODERATOR
        ROLE_MODERATOR: ROLE_USER